replicaCount: 1

image:
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 3001
  targetPort: 3001

env:
  LOG_TYPE: FILE
  LOG_DIR: /logs
  LOG_BACKUP_COUNT: "7"
  LOG_LEVEL: INFO
  OPENWEATHER_BASE_URL: https://api.openweathermap.org/data/2.5
  OPENWEATHER_GEO_BASE_URL: https://api.openweathermap.org/geo/1.0
  MCP_HOST: localhost
  MCP_PORT: 3001

resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 256Mi

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClassName: standard

ingress:
  enabled: false
  host: ""

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  useCpu: true
  targetCPUUtilizationPercentage: 70
  custom:
    enabled: true
    metrics:
      - name: http_requests_per_second
        averageValue: "10"
      - name: latency_milliseconds
        averageValue: "200"

monitoring:
  alerts:
    enabled: true
    rules:
      - alert: HighRequestLatency
        expr: >
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket{job="weather-mcp"}[5m]))
            by (le)
          ) > 1.5
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High latency for Weather MCP"
          description: "p95 latency is above 1500ms"

      - alert: WeatherMcpDown
        expr: up{job="weather-mcp"} == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Weather MCP is down"
          description: "Instance {{ $labels.instance }} is not responding."
